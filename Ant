local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Lx Hubã€¢V1",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Please wait you glorious piece of shit",
   LoadingSubtitle = "By S0ulstis",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "P", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Lx Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Tabs", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Soup",
   Content = "Execute ts again sometime",
   Duration = 3,
   Image = nil,
})

local Button = MainTab:CreateButton({
   Name = "Fast Ant Speed",
   Callback = function()
        local Workspace = game:GetService("Workspace")

local FAST_SPEED = 50
local knownHumanoids = {}

-- Check and update speed for new ants every second
while true do
	for _, plot in ipairs(Workspace:WaitForChild("Plots"):GetChildren()) do
		for _, descendant in ipairs(plot:GetDescendants()) do
			if descendant:IsA("Humanoid") and not knownHumanoids[descendant] then
				if descendant.Parent and descendant.Parent:FindFirstChild("HumanoidRootPart") then
					descendant.WalkSpeed = FAST_SPEED
					knownHumanoids[descendant] = true
				end
			end
		end
	end
	task.wait(1)
end
   end,
})

local Button = MainTab:CreateButton({
   Name = "Get Seed",
   Callback = function()
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local tokensFolder = workspace:WaitForChild("Tokens")
local visited = {}
local timeLimit = 5
local startTime = tick()

-- Get the part to move (BasePart or PrimaryPart of a model)
local function getTeleportablePart(token)
	if not token or not token:IsDescendantOf(workspace) then return nil end
	if token:IsA("BasePart") then
		return token
	elseif token:IsA("Model") then
		return token.PrimaryPart or token:FindFirstChildWhichIsA("BasePart", true)
	end
end

-- Move token (whole model if possible) directly to player
task.spawn(function()
	while tick() - startTime < timeLimit do
		for _, token in ipairs(tokensFolder:GetChildren()) do
			if not visited[token] then
				local part = getTeleportablePart(token)
				if part then
					visited[token] = true

					if token:IsA("Model") and token.PrimaryPart then
						token:SetPrimaryPartCFrame(HumanoidRootPart.CFrame)
					else
						part.CFrame = HumanoidRootPart.CFrame
					end

					task.wait(0.1) -- fast teleport
				end
			end
		end
		RunService.Heartbeat:Wait()
	end
end)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Player Walkspeed",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Player Walkspeed", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local Players = game:GetService("Players")
local player = Players.LocalPlayer

local targetSpeed = (Value) -- Change this to your desired walkspeed

local function applySpeed()
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid", 5)
	if humanoid then
		humanoid.WalkSpeed = targetSpeed
	end
end

-- Apply on spawn
player.CharacterAdded:Connect(function()
	task.wait(1)
	applySpeed()
end)

-- Call this when your button is clicked
applySpeed()
   end,
})
